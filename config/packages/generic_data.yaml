substitutions:
  ble_uuid_generic_data_characteristic: ${ble_uuid_prefix}df
  ble_uuid_generic_command_characteristic: ${ble_uuid_prefix}dd
  generic_data_prefix: Generic Data
  generic_data_id_prefix: generic_data
  generic_data_update_interval: 60s

globals:
  - id: g_${generic_data_id_prefix}_raw
    type: std::string
    restore_value: no
  - id: g_${generic_data_id_prefix}_config_read_bool
    type: bool
  - id: g_${generic_data_id_prefix}_charge_mode
    type: std::string
    restore_value: yes
  - id: g_${generic_data_id_prefix}_connection_type
    type: std::string
    restore_value: yes
  - id: g_${generic_data_id_prefix}_charging_phases
    type: int
    restore_value: yes
  - id: g_${generic_data_id_prefix}_i_max
    type: int
    restore_value: yes
  - id: g_${generic_data_id_prefix}_i_evse_max
    type: int
    restore_value: yes
  - id: g_${generic_data_id_prefix}_i_evse_min
    type: int
    restore_value: yes

sensor:
  - platform: template
    name: "Charging Phases"
    id: ${generic_data_id_prefix}_charging_phases
    icon: mdi:counter
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
    lambda: |-
      return id(g_${generic_data_id_prefix}_charging_phases);
  - platform: template
    name: "Maximum available capacity"
    id: ${generic_data_id_prefix}_i_max
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
    lambda: |-
      return id(g_${generic_data_id_prefix}_i_max);
  - platform: template
    name: "Peak consumption limit"
    id: ${generic_data_id_prefix}_i_evse_max
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
    lambda: |-
      return id(g_${generic_data_id_prefix}_i_evse_max);
  - platform: template
    name: "Offloading minimum"
    id: ${generic_data_id_prefix}_i_evse_min
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
    lambda: |-
      return id(g_${generic_data_id_prefix}_i_evse_min);

text_sensor:
  - platform: template
    name: "Mode"
    id: ${generic_data_id_prefix}_charge_mode
    icon: mdi:speedometer
    update_interval: ${generic_data_update_interval}
    lambda: |-
      return id(g_${generic_data_id_prefix}_charge_mode);
  - platform: template
    name: "Connection type"
    id: ${generic_data_id_prefix}_connection_type
    icon: mdi:transmission-tower
    update_interval: ${generic_data_update_interval}
    lambda: |-
      return id(g_${generic_data_id_prefix}_connection_type);
  - platform: ble_client
    id: ${device_name}_generic_data
    internal: true
    ble_client_id: ${device_name}_ble_client_id
    service_uuid: ${ble_uuid_receive_service}
    characteristic_uuid: ${ble_uuid_generic_data_characteristic}
    notify: true
    update_interval: ${generic_data_update_interval}
    on_notify:
      then:
        lambda: |-
            auto hex_data = format_hex_pretty((uint8_t *) x.c_str(), x.size());
            ESP_LOGD("${device_name}_generic_data", "%s", hex_data.c_str());
            id(g_${generic_data_id_prefix}_raw) = x.c_str();
            if (x.size() == 51) {
              //Flag the config read as true
              id(g_${generic_data_id_prefix}_config_read_bool) = true;
              // Extract the charge_mode
              int charge_mode = x[10] & 0xFF;
              // Publish the charge mode
              String charge_mode_string;
              switch (charge_mode) {
                  case 0:
                      charge_mode_string = "Eco Private";
                      break;
                  case 1:
                      charge_mode_string = "Max Private";
                      break;
                  case 4:
                      charge_mode_string = "Eco Open";
                      break;
                  case 5:
                      charge_mode_string = "Max Open";
                      break;
                  default:
                      charge_mode_string = "unknown";
              }
              id(g_${generic_data_id_prefix}_charge_mode) = charge_mode_string.c_str();

              // Extract the network_type
              int network_type = x[26] & 0xFF;
              ESP_LOGD("network_type", "Value at index 26: %d", network_type);

              // Publish the charge mode
              String network_type_string;
              switch (network_type) {
                  case 0:
                      network_type_string = "Mono/Tri+N";
                      break;
                  case 3:
                      network_type_string = "Tri";
                      break;
                  default:
                      network_type_string = "unknown";
              }
              id(g_${generic_data_id_prefix}_connection_type) = network_type_string.c_str();

              // Extract the app_as_key
              int app_as_key_int = x[22] & 0xFF;
              ESP_LOGD("app_as_key_int", "Value at index 22: %d", app_as_key_int);

              switch (app_as_key_int) {
                  case 0:
                      id(app_as_key).turn_on();
                      break;
                  default:
                      id(app_as_key).turn_off();
                      break;
              }

              int16_t charging_phases_int = x[28] & 0xFF;
              id(g_${generic_data_id_prefix}_charging_phases) = charging_phases_int;

              int16_t i_max_int = x[16] & 0xFF;
              id(g_${generic_data_id_prefix}_i_max) = i_max_int;

              int16_t i_evse_max_int = x[18] & 0xFF;
              id(g_${generic_data_id_prefix}_i_evse_max) = i_evse_max_int;

              int16_t i_evse_min_int = x[20] & 0xFF;
              id(g_${generic_data_id_prefix}_i_evse_min) = i_evse_min_int;

            }
switch:
  - platform: template
    name: "App as key"
    id: app_as_key
    icon: mdi:cellphone-key
    turn_on_action:
      - logger.log: "App as key turned On!" #TODO Write change

button:
  - platform: template
    name: "Read config"
    id: read_config_button
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command_characteristic}
          value: [0x04, 0x50]
  - platform: template
    name: "Start Charge Default"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command_characteristic}
          value: [0x01, 0x00]
  - platform: template
    name: "Start Charge Max"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command_characteristic}
          value: [0x02, 0x00]
  - platform: template
    name: "Start Charge Auto"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command_characteristic}
          value: [0x03, 0x00]
  - platform: template
    name: "Start Charge Eco"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command_characteristic}
          value: [0x04, 0x00]
  - platform: template
    name: "Start Charge Stop"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command_characteristic}
          value: [0x06, 0x00]
